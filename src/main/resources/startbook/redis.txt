1、什么是 Redis
  Redis 是一个高性能的 Key-Value 数据库，它是完全开源免费的，而且 Redis 是一个 NoSQL 类型数据库，
  是为了解决 高并发、高扩展，大数据存储 等一系列的问题而产生的数据库解决方案，是一个非关系型的数据库。但是，它也是不能替代关系型数据库，只能作为特定环境下的扩充。

2、为什么使用 Redis 作为缓存
    支持高可用： Redis 支持 master\slave 主\从机制、sentinal 哨兵模式、cluster 集群模式，这样大大保证了 Redis 运行的稳定和高可用行。
        高性能：直接请求mysql太慢，查询结果丢到redis中，性能提升几百倍
        高并发（大公司）：缓存市内存操作，天然支持高并发
    支持多种数据结构： Redis 不仅仅支持简单的 Key/Value 类型的数据，同时还提供 list、set、zset、hash 等数据结构的存储。
    支持数据持久化： 可以将内存中的数据持久化在磁盘中，当宕机或者故障重启时，可以再次加载进如 Redis，从而不会或减少数据的丢失。

1.项目中缓存是如何使用的
    一些频繁被访问的数据，经常被访问的数据如果放在关系型数据库，每次查询的开销都会很大，而放在redis中，因为redis 是放在内存中的可以很高效的访问

3.用了缓存的不良后果
    缓存和库不一致
        先读缓存，缓存未命中，读数据库更新缓存
        写或更新，先更新数据库，再删除缓存

    雪崩：高峰期缓存挂了，大量请求落在库上， 数据库扛不住被打死，数据库重启又被打死
        事前：保证redis集群的高可用，主从+哨兵
        事中： 本地ehcache缓存，hystrix限流降级，避免数据库被打死
        事后：redis开启持久化，重启自动加载数据，快速恢复缓存数据

    穿透：缓存和库都没数据 一只查库导致库被打死
        库中无数据把脏值写到缓存，设置一个较短的过期时间，下次请求直接从redis读取
        使用布隆过滤器，布隆过滤器能判断一个 key 一定不存在，在缓存的基础上，构建布隆过滤器数据结构，在布隆过滤器中存储对应的 key，如果存在，则说明 key 对应的值为空

    击穿：热点key，集中并发访问，key失效瞬间，大量请求击穿缓存，直接请求数据库
        设置二级缓存，或者设置热点缓存永不过期，需要根据实际情况进行配置。
        使用互斥锁，在执行过程中，如果缓存过期，那么先获取分布式锁，在执行从数据库中加载数据，如果找到数据就存入缓存，没有就继续该有的动作，在这个过程中能保证只有一个线程操作数据库，避免了对数据库的大量请求。

    缓存并发竞争
        分布式锁确保同一时间只有一个系统

4.redis有哪些数据类型 分别在哪些场景下用
    string  最基本类型，普通set get
    hash 类似map的一种结构 存放对象  key=100 value={"id":100,name="zhangsan"}
    list  有序可重复列表 粉丝列表 评论类列表 value=[zhangsan,lisi,wangwu]  可做简单消息队列，除了Redis自身的发布/订阅模式
    set  无序集合，自动去重  基与set玩交集、并集、差集操作。比如交集可以玩微博共同粉丝
    sorted set（zset） 排序的set，去重但可以排序 可以自定义排序  做排行榜

5.redis的过期策略
    set key value
    给某个key设置过期时间   expire key time
    获取key的剩余生存时间 ttl key
    删除key的过期时间（生存时间） PERSIST key
    过期删除策略：定期删除+惰性删除
    内存淘汰机制：volatile-lru 从已设置过期时间的数据集中挑选最近最少使用的数据淘汰
               volatile-ttl 从已设置过期时间的数据集中挑选将要过期的数据淘汰
               volatile-random从已设置过期时间的数据集中任意选择数据淘汰
               allkeys-lru从所有数据集中挑选最近最少使用的数据淘汰
               allkeys-random从所有数据集中任意选择数据进行淘汰
               noeviction禁止驱逐数据

6.redis的瓶颈
    单机 QPS一万到几万
    读多写少
    策略 ： redis主从进行读写分离 master进行写入并同步到slave， slave进行读 读的qps增加可以进行增加salve节点分担

7.持久化（数据写入磁盘） redis会优先默认选择aof aof文件更完整 每一秒都在写入
    意义 ：故障恢复
    rdb快照：将某个时间点的所有数据都存放到硬盘上。 备注：全量备份，新数据覆盖老数据
        优点：1）定时生成全量数据快照文件，适合做冷备份或者是灾难恢复
             2）生成RDB文件的时候，redis主进程会fork()一个子进程来处理所有保存工作，主进程不需要进行任何磁盘IO操作。
             3）RDB 在恢复大数据集时的速度比 AOF 的恢复速度要快。
        缺点：
            一般rdb快找文件每隔五分钟或更长时间生成一次，这个时候redis宕机的话会丢失这部分数据，比aof丢的要多

    aof：对每条写入命令作为日志，以append-only写入一个日志文件中，在redis重启的时候可以通过回放aof日志中的写入指令重新构建整个数据集
        优点：1）可以更好的保护数据不丢失，一般每隔一秒，后台线程执行一次fsync操作，最多只会丢失一秒的数据
             2）aof文件以append-only模式写入，写入性能高，文件不易破损，即使尾部破损，也可修复
        缺点：
            1）文件比较大
            2）qps比rdb要低

   rdb和aof怎么选择？
        综合使用rdb和aof ，aof保证数据不丢失，rdb做冷备份


8.生产环境的redis是怎么部署的？
    redis cluster 10台机器 5台主实例 5台从实例 每一个主挂着一个从，5个节点对外提供读写服务，每个节点读写高峰5万qps 5台最高25万qps

Redis主从同步原理
    Redis一般是使用Master节点来进行写操作，若干个Slave节点进行读操作
    -  从服务器连接主服务器，发送SYNC命令；
    -  主服务器接收到SYNC命名后，开始执行BGSAVE命令生成RDB文件，并使用缓冲区记录执行的所有写命令；
    -  主服务器向所有从服务器发送快照文件，并在发送期间继续记录被执行的写命令；
    -  从服务器收到快照文件后丢弃所有旧数据，载入收到的快照；
    -  主服务器快照发送完毕后开始向从服务器发送缓冲区中的写命令；
    -  从服务器完成对快照的载入，开始接收命令请求，并执行来自主服务器缓冲区的写命令；

    哨兵模式

