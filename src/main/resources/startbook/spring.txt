spring 有哪些主要模块？
    spring core：框架的最基础部分，提供 ioc 和依赖注入特性。
    spring context：构建于 core 封装包基础上的 context 封装包，提供了一种框架式的对象访问方法。
    spring dao：Data Access Object 提供了JDBC的抽象层。
    spring aop：提供了面向切面的编程实现，让你可以自定义拦截器、切点等。
    spring web：提供了针对 Web 开发的集成特性，例如文件上传，利用 servlet listeners 进行 ioc 容器初始化和针对 Web 的 ApplicationContext。
    spring web mvc：spring 中的 mvc 封装包提供了 Web 应用的 Model-View-Controller（MVC）的实现。


spring是怎么全局处理异常的
    @ExceptionHandler：统一处理某一类异常，从而能够减少代码重复率和复杂度
    @ControllerAdvice：异常集中处理，更好的使业务逻辑与异常处理剥离开
    @ResponseStatus：可以将某种异常映射为HTTP状态码

spring的aop和@aspectj区别
    1、织入的时期不同
    Spring Aop采用的动态织入，而Aspectj是静态织入。静态织入：指在编译时期就织入，即：编译出来的class文件，字节码就已经被织入了。
    2、从使用对象不同
    Spring AOP的通知是基于该对象是SpringBean对象才可以，而AspectJ可以在任何Java对象上应用通知

Spring的AOP和IOC是什么？使用场景有哪些？
    AOP：面向切面编程。即在一个功能模块中新增其他功能  例如方法做日志
    IOC：依赖注入或者叫做控制反转。
        正常情况下我们使用一个对象时都是需要new Object()的。而ioc是把需要使用的对象提前创建好，放到spring的容器里面。
        所有的类的创建、销毁都由spring来控制，也就是说控制对象生存周期的不再是引用它的对象，而是spring。
IOC三种注入方式
    （1）XML：Bean实现类来自第三方类库，例如DataSource等。需要命名空间等配置，例如：context，aop，mvc。
    （2）注解：在开发的类使用@Controller，@Service等注解
    （3）Java配置类：通过代码控制对象创建逻辑的场景。例如：自定义修改依赖类库。

简单说明spring如何解决循环依赖
    我们先实例化A，实例化好后，调用addSingletonFactory放入三级缓冲池中，然后此时我们设置属性的时候会发现我们还依赖B，于是我们就先去实例化B后并为进行属性赋值，而当我们进行赋值的时发现B也依赖A，
    但是之前已经把A存放在singletonFactories，那么B会将其取出并装配自己，实例化以后把自己放入单例池中，然后A也就可以继续进行属性赋值了，最后A 实例好以后，将自己也放入单例池中，这样Spring就解决了循环依赖。

讲讲Spring里面AOP的代理模式？jdk的代理模式和cglib的代理模式又啥区别？
    1）JDK动态代理：
        具体实现原理：
        1、通过实现InvocationHandler接口创建自己的调用处理器
        2、通过为Proxy类指定ClassLoader对象和一组interface来创建动态代理
        3、通过反射机制获取动态代理类的构造函数，其唯一参数类型就是调用处理器接口类型
        4、通过构造函数创建动态代理类实例，构造时调用处理器对象作为参数参入
        JDK动态代理是面向接口的代理模式，如果被代理目标没有接口那么Spring也无能为力，
        Spring通过java的反射机制生产被代理接口的新的匿名实现类，重写了其中AOP的增强方法。

    2、CGLib动态代理
        CGLib是一个强大、高性能的Code生产类库，可以实现运行期动态扩展java类，Spring在运行期间通过 CGlib继承要被动态代理的类，重写父类的方法，实现AOP面向切面编程。

    区别：
        Spring的代理底层使用的就是JDK动态代理和CGLib动态代理这两种代理，可以根据需要，指定具体使用哪种代理生成机制（默认为JDK动态代理）
        JDK动态代理需要使用接口的方式，接口去掉直接写它的实现类，那么则会报错
        cglib则不需要使用接口，是基于继承实现的，直接创建实现类
        基本规则是：目标业务类如果有接口则用JDK代理，没有接口则用CGLib代理
        JDK动态代理是面向接口，在创建代理实现类时比CGLib要快，创建代理速度快。
        CGLib动态代理是通过字节码底层继承要代理类来实现（如果被代理类被final关键字所修饰，那么抱歉会失败），在创建代理这一块没有JDK动态代理快，但是运行速度比JDK动态代理要快。

        如果你的类实现了某个接口 aop会默认使用jdk动态代理，生成一个跟你实现一样类的一个代理类，构造一个实例对象出来
        如果你的类没有实现接口，aop会改用cglib动态代理，生成你类的一个子类，可以生成动态字节码，覆盖你的一些方法，在方法里加入增强代码

    Ioc、Aop的理解：
     Ioc控制反转、依赖注入（底层是反射技术） 实现类与类之间的解耦
     AOP（Aspect Oriented Programming）称为面向切面编程，在程序开发中主要用来解决一些系统层面上的问题，比如日志，事务，权限等