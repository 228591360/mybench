redis主要是基于内存来进行高性能、高并发的读写操作的。
1.项目中缓存是如何使用的
    经常使用的数据放到缓存
    数据不变的
2.为什么要用
    高性能



    高并发（大公司）



3.用了缓存的不良后果
    缓存和库不一致

    雪崩：缓存整体雪崩，大量请求落库 数据库被打死
        事前：保证redis集群的高可用
        事中： hystrix限流降级
        事后：redis开启持久化
    穿透：缓存和库都没数据 一只查库导致库被打死
        库中无数据把空数据写到缓存

    缓存并发竞争

4.redis有哪些数据类型 分别在哪些场景下用
    string  最基本类型，普通set get
    hash 类似map的一种结构 存放对象  key=100 value={"id":100,name="zhangsan"}
    list  有序可重复列表 粉丝列表 评论类列表 value=[zhangsan,lisi,wangwu]
    set  无序集合，自动去重  基与set玩交集、并集、差集操作。比如交集可以玩微博共同粉丝
    sorted set 排序的set，去重但可以排序 可以自定义排序

5.redis的过期策略
    set key value
    给某个key设置过期时间   expire key time
    获取key的剩余生存时间 ttl key
    删除key的过期时间（生存时间） PERSIST key
    过期删除策略：定期删除+惰性删除
    内存淘汰机制：allkeys-lru 移除最近最少使用的key（使用最多的机制）

6.redis的瓶颈
    单机 QPS一万到几万
    读多写少
    策略 ： redis主从进行读写分离 master进行写入并同步到slave， slave进行读 读的qps增加可以进行增加salve节点分担

7.持久化（数据写入磁盘） redis会优先默认选择aof aof文件更完整 每一秒都在写入
    意义 ：故障恢复
    rdb快照：对redis中的数据执行周期性备份持久化
        优点：1）定时生成全量数据快照文件，适合做冷备份
             2）rdb对redis对外提供读写服务，可以让redis保持高性能，因为redis主进程只需要fork一个子进场执行io操作进行rdb持久化操作
             3）基于rdb数据文件重启或恢复redis进程，更加快速
        缺点：
            一般rdb快找文件每隔五分钟或更长时间生成一次，这个时候redis宕机的话会丢失这部分数据，比aof丢的要多

    aof：对每条写入命令作为日志，以append-only写入一个日志文件中，在redis重启的时候可以通过回放aof日志中的写入指令重新构建整个数据集
        优点：1）可以更好的保护数据不丢失，一般每隔一秒，后台线程执行一次fsync操作，最多只会丢失一秒的数据
             2）aof文件以append-only模式写入，写入性能高，文件不易破损，即使尾部破损，也可修复
        缺点：
            1）文件较大
            2）qps比rdb要低

   rdb和aof怎么选择？
        综合使用rdb和aof ，aof保证数据不丢失，rdb做冷备份